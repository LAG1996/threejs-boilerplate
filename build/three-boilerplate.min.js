import{PerspectiveCamera as e,WebGLRenderer as t,OrbitControls as r}from"three/build/three.min.js";import"three/examples/js/controls/OrbitControls.js";class a extends Scene{get CAMERA(){return this._camera}get RENDERER(){return this._renderer}constructor(a){super(),this._camera=new e(a.fov,a.aspect,a.near,a.far),this._renderer=new t,this._renderer.setPixelRatio(window.devicePixelRatio),this._orbitControls=new r(this._camera,this._renderer.domElement)}addToScene(e){Array.isArray(e)?this.add(...e):this.add(e)}removeFromScene(e){Array.isArray(obj3d)?this.scene.remove(...obj3d):this.scene.remove(obj3d)}draw(){this._renderer.render(this,this.camera)}}class s{constructor(e){e.getBoundingClientRect();this._container=e,this._sceneManager=a({fov:45,aspect:this._container.width/this._container.height,near:1,far:1e4,defaultPosition:{x:400,y:200,z:0}}),this._container.appendChild(this._sceneManager.RENDERER.domElement),this._lastDrawCall=(new Date).getTime(),this._update=e=>{},requestAnimationFrame(this._updateRoutine.bind(this))}addObject(e){this._sceneManager.addToScene(e)}removeObject(e){this._sceneManager.addToScene(e)}setUpdateFunction(e){this.update=e}_updateRoutine(){const e=(new Date).getTime(),t=e-this._lastDrawCall;this._lastDrawCall=e,this.update(t),this._sceneManager.draw()}}export{s as Engine};
